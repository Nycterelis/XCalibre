@model XCalibre.Models.Ticket
@using XCalibre.Models;
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div class="row">
    <div class="col-md-8">
        <div class="card-box task-detail ribbon-box">
            <div class="media mt-0 m-b-30">
                <img class="d-flex mr-3 rounded-circle" alt="64x64" src=@Model.OwnerUser.ProfilePicture style="width: 48px; height: 48px;">
                <div class="media-body">
                    <h5 class="media-heading mb-0 mt-0">@Html.DisplayFor(model => model.OwnerUser.FullName)</h5>
                    @if (Model.TicketPriority.Name == "Urgent")
                    {
                        <span class="badge badge-danger">@Html.DisplayFor(model => model.TicketPriority.Name)</span>


                    }
                    @if (Model.TicketPriority.Name == "New")
                    {
                        <span class="badge badge-success">@Html.DisplayFor(model => model.TicketPriority.Name)</span>


                    }
                    @if (Model.TicketPriority.Name == "Low")
                    {
                        <span class="badge badge-purple">@Html.DisplayFor(model => model.TicketPriority.Name)</span>

                    }
                    @if (Model.TicketPriority.Name == "Mid")
                    {
                        <span class="badge badge-warning">@Html.DisplayFor(model => model.TicketPriority.Name)</span>

                    }
                    @if (Model.TicketPriority.Name == "High")
                    {
                        <span class="badge badge-danger">@Html.DisplayFor(model => model.TicketPriority.Name)</span>

                    }
                </div>
            </div>
            <h4 class="m-b-20">@Html.DisplayFor(model => model.Title)</h4>

            <p class="text-muted">
                @Html.DisplayFor(model => model.Body)
            </p>

            <ul class="list-inline task-dates m-b-0 mt-5">
                <li>
                    <h5 class="m-b-5">Created</h5>
                    <p>@Html.DisplayFor(model => model.Created).ToString().AsDateTime().ToString("MMM dd yyyy")</p>
                </li>

                <li>
                    @if (Model.Updated != null)
                    {
                        <h5 class="m-b-5">Last Update</h5>
                        <p>@Html.DisplayFor(model => model.Updated)</p>
                    }
                </li>
            </ul>
            <div class="clearfix"></div>


            @if (User.IsInRole("Admin"))
            {
                <div class="assign-team mt-4">
                    <h5 class="m-b-5">Assigned to</h5>
                    @Html.DisplayFor(model => model.AssignedToUser.FullName)
                </div>
                <div class="assign-team mt-4">
                    <a href=@Url.Action("EditUser", new { id = Model.Id })>
                        <button class="btn-custom btn-rounded waves-effect waves-light" href=@Url.Action("EditUser", new { id = Model.Id })>
                            Assign To A New Developer
                            <i class="dripicons-user"></i>
                        </button>
                    </a>
                </div>
            }
            @if (User.IsInRole("ProjectManager"))
            {
                <div class="assign-team mt-4">
                    <h5 class="m-b-5">Assigned to</h5>
                    @Html.DisplayFor(model => model.AssignedToUser.FullName)
                </div>
                <div class="assign-team mt-4">
                    <button class="btn-custom btn-rounded waves-effect waves-light" href=@Url.Action("EditUser", new { id = Model.Id })>
                        Assign To A New Developer
                        <i class="dripicons-user"></i>
                    </button>
                    @*@Html.ActionLink("Assign To A New Developer", "EditUser", new { id = Model.Id })*@
                </div>
            }

            <div class="attached-files mt-4">
                <h5 class="">Attached Files </h5>
                <div class="files-list">
                    @foreach (var att in Model.Attachments)
                    {
                        <div class="file-box">
                            @if (att.FileUrl != null)
                            {
                                if (att.FileUrl.Contains(".jpg"))
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="@Url.Content(att.FileUrl)" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>
                                }
                                else if (att.FileUrl.Contains(".jpeg"))
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="@Url.Content(att.FileUrl)" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>
                                }
                                else if (att.FileUrl.Contains(".gif"))
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="@Url.Content(att.FileUrl)" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>
                                }
                                else if (att.FileUrl.Contains(".png"))
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="@Url.Content(att.FileUrl)" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>
                                }
                                else if (att.FileUrl.Contains(".bmp"))
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="@Url.Content(att.FileUrl)" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>
                                }
                                else if (att.FileUrl.Contains(".pdf"))
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="~/Uploads/PDF File Extension.png" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>
                                }
                                else if (att.FileUrl.Contains(".xls"))
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="~/Uploads/XLS File Extension.png" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>
                                }
                                else
                                {
                                    <img class="img-responsive" width="100%" height="100%" src="~/Uploads/DOC File Extension.png" alt="" />
                                    <a href=@Url.Action("Download", "TicketAttachments", new { ImageName = att.FileUrl })><i class="dripicons-download"></i></a>

                                }
                            }
                        </div>
                    }
                    @*<a href=""><img src="assets/images/attached-files/img-1.jpg" class="img-responsive img-thumbnail" alt="attached-img"></a>
                        <p class="font-13 mb-1 text-muted"><small>File one</small></p>*@


                    <div class="file-box ml-3">
                        @if (Model.AssignedToUserId == User.Identity.GetUserId())
                        {
                            <span>@Html.ActionLink("+", "Create", "TicketAttachments", new { TicketId = Model.Id }, new { @class = "add-new-plus" }) </span>
                        }
                        else if (Model.OwnerUserId == User.Identity.GetUserId())
                        {
                            <span>@Html.ActionLink("+", "Create", "TicketAttachments", new { TicketId = Model.Id }, new { @class = "add-new-plus" }) </span>
                        }
                        else if (Model.Project.PmId == User.Identity.GetUserId())
                        {
                            <span>@Html.ActionLink("+", "Create", "TicketAttachments", new { TicketId = Model.Id }, new { @class = "add-new-plus" }) </span>
                        }
                        else if (User.IsInRole("Admin"))
                        {
                            <span>@Html.ActionLink("+", "Create", "TicketAttachments", new { TicketId = Model.Id }, new { @class = "add-new-plus" }) </span>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="text-right m-t-30">
                            @*<button type="submit" class="btn btn-success waves-effect waves-light">
                                </button>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-4">
        <div class="card-box">
            <h4 class="header-title m-b-30">Comments @Model.Comments.Where(i => i.TicketId == Model.Id).Count()</h4>

            <div>

                <div class="media m-b-20">
                    <div class="d-flex mr-3">
                        @*<a href="#"> <img class="media-object rounded-circle thumb-sm" alt="64x64" src="assets/images/users/avatar-1.jpg"> </a>*@
                    </div>
                    <div class="media-body">
                        <ul>
                            @foreach (var comm in Model.Comments)
                            {
                                <li>
                                    <p>
                                        <h5 class="mt-0">@comm.User.FullName <span> on @comm.Created.ToString("MMM dd yyyy")</span></h5>
                                    </p>
                                    <p class="font-13 text-muted mb-0">
                                        @comm.Body
                                    </p>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                @if (Model.AssignedToUserId == User.Identity.GetUserId())
                {
                    @Html.ActionLink("Comment", "Create", "TicketComments", new { TicketId = Model.Id }, new { @class = "btn btn-custom btn-rounded waves-light waves-effect" })
                }
                else if (Model.OwnerUserId == User.Identity.GetUserId())
                {
                    @Html.ActionLink("Comment", "Create", "TicketComments", new { TicketId = Model.Id }, new { @class = "btn btn-custom btn-rounded waves-light waves-effect" })
                }
                else if (Model.Project.PmId == User.Identity.GetUserId())
                {
                    @Html.ActionLink("Comment", "Create", "TicketComments", new { TicketId = Model.Id }, new { @class = "btn btn-custom btn-rounded waves-light waves-effect" })
                }
                else if (User.IsInRole("Admin"))
                {
                    @Html.ActionLink("Comment", "Create", "TicketComments", new { TicketId = Model.Id }, new { @class = "btn btn-custom btn-rounded waves-light waves-effect" })
                }
            </div>
        </div>
    </div>
</div>

<p>
    @if (User.IsInRole("Admin"))
    {
        @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn btn-rounded btn-warning waves-light waves-effect" })
        @Html.ActionLink("Close", "Delete", new { id = Model.Id }, new { @class = "btn btn-rounded btn-danger waves-light waves-effect" })
        @Html.ActionLink("History", "Index", "TicketHistories", new { id = Model.Id }, new { @class = "btn btn-rounded btn-primary waves-light waves-effect" })
    }
    else if (User.IsInRole("ProjectManager"))
    {
        @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn btn-rounded btn-warning waves-light waves-effect" })
        @Html.ActionLink("Close", "Delete", new { id = Model.Id }, new { @class = "btn btn-rounded btn-danger waves-light waves-effect" })
        @Html.ActionLink("History", "Index", "TicketHistories", new { id = Model.Id }, new { @class = "btn btn-rounded btn-primary waves-light waves-effect" })
    }
    else if (Model.AssignedToUserId == User.Identity.GetUserId())
    {
        @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn btn-rounded btn-warning waves-light waves-effect" })
        @Html.ActionLink("History", "Index", "TicketHistories", new { id = Model.Id }, new { @class = "btn btn-rounded btn-primary waves-light waves-effect" })
    }
    else if (Model.OwnerUserId == User.Identity.GetUserId())
    {
        @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn btn-rounded btn-warning waves-light waves-effect" })
    }



</p>

